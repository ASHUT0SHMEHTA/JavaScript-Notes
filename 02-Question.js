// Q2. What are Client-side and Server-side?

// 1. Client-side

// Definition: Operations or code that run on the user’s browser (the client).

// Purpose: Makes web pages interactive and dynamic without sending requests to the server every time.

// Technologies: HTML, CSS, JavaScript, React, Angular, Vue, etc.

// Advantages:

// Faster response for user actions.

// Reduces load on the server.

// Example:

// JavaScript running in browser

document.getElementById("btn").addEventListener("click", () => {
    alert("Button clicked!");
});

// Here, the button click is handled entirely in the browser.

// 2. Server-side

// Definition: Operations or code that run on the web server.

// Purpose: Handles database operations, authentication, and backend logic.

// Technologies: Node.js, PHP, Python (Django, Flask), Java (Spring), etc.

// Advantages:

// Can handle sensitive data securely.

// Can perform heavy computation or database management.

// Example (Node.js):

// // Node.js server code

const http = require("http");

const server = http.createServer((req, res) => {
    res.write("Hello from server!");
    res.end();
});

// server.listen(3000, () => console.log("Server running on port 3000"));

// Here, the message is generated by the server and sent to the client.

// Summary Table for Notes:

// Feature            Client-side                     Server-side

// Runs on          User’s browser                  Web server
// Languages        JavaScript, HTML, CSS           Node.js, PHP, Python
// Purpose          Interactivity, UI               Data processing, backend logic
// Speed            Fast (local)                    Depends on server
// Security         Less secure                     More secure
